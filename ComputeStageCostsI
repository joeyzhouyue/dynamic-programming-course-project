function G = ComputeStageCostsI( stateSpace, controlSpace, disturbanceSpace, mazeSize, walls, targetCell )
%COMPUTESTAGECOSTSI Compute stage costs.
% 	Compute the stage costs for all states in the state space for all
%   attainable control inputs.
%
%
%   G = ComputeStageCostsI(stateSpace, controlSpace, disturbanceSpace,
%   mazeSize, walls, targetCell) computes the stage costs for all states in
%   the state space for all attainable control inputs.
%
%   Input arguments:
%
%       stateSpace:
%           A (MN x 2) matrix, where the i-th row represents the i-th
%           element of the state space. Note that the state space also
%           contains the target cell, in order to simplify state indexing.
%
%       controlSpace:
%           A (L x 2) matrix, where the l-th row represents the l-th
%           element of the control space.
%
%       disturbanceSpace:
%           A (S x 3) matrix 'disturbanceSpace', where the first two
%           columns of each row represent an element of the disturbance
%           space, and the third column represents the corresponding
%           probability.
%
%       mazeSize:
%           A (1 x 2) matrix containing the width and the height of the
%           maze in number of cells.
%
%   	walls:
%          	A (2 x 2K) matrix containing the K wall segments, where the start
%        	and end point of the k-th segment are stored in column 2k-1
%         	and 2k, respectively.
%
%    	targetCell:
%          	A (2 x 1) matrix describing the position of the target cell in
%         	the maze.
%
%   Output arguments:
%
%       G:
%           A (MN x L) matrix containing the stage costs of all states in
%           the state space for all attainable control inputs. The entry
%           G(i, l) represents the cost if we are in state i and apply
%           control input l.

% put your code here
%% reachability of control inputs and disturbances
% this part code is the same as the part in "ComputeTransitionProbabilitiesI.m" 

mazeSize_N = mazeSize(1);
mazeSize_M = mazeSize(2);
[number_of_states,~] = size(stateSpace);
[length_controlSpace,~] = size(controlSpace);
[length_disturbanceSpace,~] = size(disturbanceSpace);

% reachable_control_logi is a NM x L matrix, the row index is the 
% state numbers, the column index gives logical informations about 
% reachabilty of the corresponding control inputs.
reachable_control_logi = zeros(number_of_states, length_controlSpace); 
% reachable_disturb_logi is a NM x S matrix, the row index is the 
% state numbers, the column index gives logical informations about 
% reachabilty of the corresponding disturbances.
reachable_disturb_logi = zeros(number_of_states, length_disturbanceSpace); 

% determine the reachable steps around each cell by control inputs and
% disturbances
for  i_co = 1:number_of_states
    i_coordinate = stateSpace(i_co,:);
    % for every cell loop create a 1x13 reachablity vector
    reachable_control_single = zeros(1,13);
    reachable_disturb_single = zeros(1,5);
        
    % reachability check for control input (-2,0), "left and left"
    i_coordinate_on_wall = i_coordinate(1) < 3; %  too close to left wall
    % outer potential wall piece existence check
    wall_check_1_1 = [i_coordinate(1)-2,i_coordinate(2)-1]'; % lower point
    wall_check_1_2 = [i_coordinate(1)-2,i_coordinate(2)]'; % upper point
    % check if there is a wall piece consisting of these two points
    wall_check_1_logi = wallCheckTwoPoints(wall_check_1_1,wall_check_1_2, walls);
    % inner potential wall piece existence check
    wall_check_2_1 = [i_coordinate(1)-1,i_coordinate(2)-1]'; % lower point
    wall_check_2_2 = [i_coordinate(1)-1,i_coordinate(2)]'; % upper point
    % check if there is a wall piece consisting of these two points
    wall_check_2_logi = wallCheckTwoPoints(wall_check_2_1,wall_check_2_2, walls);
    % find the index of the input (-2,0)
    index_corresponding_control_input = ismember(controlSpace,[-2,0],'rows');
    % when these are true: not too close to the left wall, no wall pieces
    % inbetween, the control input (-2,0) could be used, otherwise not.
    condition_logi = ~i_coordinate_on_wall && ~wall_check_1_logi && ~wall_check_2_logi;
    if condition_logi
        reachable_control_single(index_corresponding_control_input) = 1;
    end
    
    % 
... other 2-step movements including "down and down", "up and up", "right and right", "left and up", " left and down", ...
% 
    
    % reachability check for control input (-1,0) "left"
    i_coordinate_on_wall = i_coordinate(1) ==1; %  on the to left wall
    % potential wall piece existence check
    wall_check_1 = [i_coordinate(1)-1,i_coordinate(2)-1]'; % lower point
    wall_check_2 = [i_coordinate(1)-1,i_coordinate(2)]'; % upper point
    % check if there is a wall piece consisting of these two points
    wall_check_logi = wallCheckTwoPoints(wall_check_1,wall_check_2, walls);
    % find the index of the input (-1,0)
    index_corresponding_control_input = ismember(controlSpace,[-1,0],'rows');
    % when these are true: not on the left wall, no wall pieces
    % inbetween, the control input (-1,0) could be used, otherwise not.
    condition_logi = ~i_coordinate_on_wall && ~wall_check_logi;
    if condition_logi
        reachable_control_single(index_corresponding_control_input) = 1;
    end
    % find the index of the disturb input (-1,0)
    index_corresponding_disturb_input = ismember(disturbanceSpace(:,1:2),[-1,0],'rows');
    % if the control input could be used, the disturbance input as well,
    % otherwise not
    if condition_logi
        reachable_disturb_single(index_corresponding_disturb_input) = 1;
    end
    

    % 
... other 1-step movements including "down", "right", "up"
%         

    % reachability for control input (0,0), "keep staying"
    % find the index of the input (0,0)
    index_corresponding_control_input = ismember(controlSpace,[0,0],'rows');
    % find the index of the disturb input (0,0)
    index_corresponding_disturb_input = ismember(disturbanceSpace(:,1:2),[0,0],'rows');
    % the control and disturbance input (0,0) can always be used.
    reachable_control_single(index_corresponding_control_input) = 1;
    reachable_disturb_single(index_corresponding_disturb_input) = 1;
    
    % write the control reachability of the single point to the 
    % reachability matrix
    reachable_control_logi(i_co,:) = logical(reachable_control_single);   
    % write the disturb reachability of the single point to the 
    % reachability matrix
    reachable_disturb_logi(i_co,:) = logical(reachable_disturb_single);

   

end
%% stage cost matrix
G = ones(number_of_states, length_controlSpace);
% find the index of the target cell
index_target = find(ismember(stateSpace,targetCell','rows'));
% the rows of the G matrix are states
for i_rows = 1 : number_of_states
    % the columns of the G matrix are control inputs
    for i_columns = 1: length_controlSpace
        % for those cells, which are not accessible with the "i_columns"th 
        % control input at the "i_rows"th state, a cost of positive 
        % infinity would be given.
        if reachable_control_logi(i_rows, i_columns) == 0
            G(i_rows, i_columns) = Inf;
        % for those cells, which are accessible with the "i_columns"th 
        % control input at the "i_rows"th state, a cost of "one" would
        % be given to penalize every step we take. The target cell will be 
        % considered later.
        elseif reachable_control_logi(i_rows, i_columns) == 1
            G(i_rows, i_columns) = 1;
        end
    end
end

% in the target cell a cost of "0" would be given.
index_control_input_0_0 = ismember(controlSpace,[0,0],'rows');
% give the target cell under control inputs (0,0) a cost of "0"
G(index_target, index_control_input_0_0) = 0;
% in the target cell a cost of "0" would be given, the costs under other 
% control inputs are infinity. The ball will stay in the target cell forever.
for i_columns = 1 : length_controlSpace
    if G(index_target, i_columns) == 1;
        G(index_target, i_columns) = Inf;
    end
end


end

%% given subfunctions
function  even = pickTheEven(nonEven)
% pick out the even value of the given <nonEdd> vector
nonEven_length = length(nonEven);
even = [];
j =1;
for i = 1:nonEven_length
    if mod(nonEven(i),2) == 0
        even(j) = nonEven(i);
        j = j+1;
    end
end
even = even';
end
function  odd = pickTheOdd(nonOdd)
% pick out the odd value of the given <nonOdd> vector
nonOdd_length = length(nonOdd);
odd = [];
j =1;
for i = 1:nonOdd_length
    if mod(nonOdd(i),2) ~= 0
        odd(j) = nonOdd(i);
        j = j+1;
    end
end
odd = odd';
end
function ja_oder_nein  = wallCheckOnePoint( point, walls )
% given one point as 2x1 matrices and 2x2K walls matrix, check if there
% exists any wall piece starting or ending at this point.
% check if the coordinates of corner point are in the <walls> matrix.
ismember_wall_check_corner = ismember(walls',point','rows');
% how often the point appears in the <walls> matrix.
index_ismember_wall_check_corner = sum(ismember_wall_check_corner);
% logical output:
% 1 means there is at least one wall piece containing this point
% 0 means there no wall piece having this point
ja_oder_nein = logical(index_ismember_wall_check_corner);    
end
function [ ja_oder_nein ] = wallCheckTwoPoints( point_1, point_2, walls)
% given two points as 2x1 matrices and 2x2K walls matrix, check if there
% exists a wall piece consisting of these two points.
% find which points in the <walls> matrix correspond to the first point
ismember_wall_check_1 = ismember(walls',point_1','rows');
% find where the first point in the <wall> matrix
index_ismember_wall_check_1 = find(ismember_wall_check_1);
% do the same for the second point
ismember_wall_check_2 = ismember(walls',point_2','rows');
index_ismember_wall_check_2 = find(ismember_wall_check_2);
% exclude those points which cannot be the begin of one wall piece
index_ismember_wall_check_1_odd = pickTheOdd(index_ismember_wall_check_1);
% exclude those points which cannot be the end of one wall piece
index_ismember_wall_check_2_even = pickTheEven(index_ismember_wall_check_2);
% check if there is any wall piece out of all possible combinations of
% the potential points
index_ismember_wall_check_2_even_odd = index_ismember_wall_check_2_even - 1;
num_wall_check_1 = length(index_ismember_wall_check_1_odd);
num_wall_check_2 = length(index_ismember_wall_check_2_even);
sum_matched = 0;
for i_check = 1:num_wall_check_1
    for j_check = 1:num_wall_check_2
        if index_ismember_wall_check_1_odd(i_check) == index_ismember_wall_check_2_even_odd(j_check)
                sum_matched = sum_matched + 1;
        end
    end
end
% logical output:
% 1 means there is a wall piece of these two points
% 0 means there no wall pieces of these two points
ja_oder_nein = logical(sum_matched);
end
